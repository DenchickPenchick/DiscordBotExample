<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DiscordBotConstructor</name>
    </assembly>
    <members>
        <member name="T:Discord.Addons.BotConstructor.Bot">
            <summary>
            Main class. There you can edit things like bot name. Also you can run bot and add commands.
            </summary>
        </member>
        <member name="P:Discord.Addons.BotConstructor.Bot.Token">
            <summary>
            Bot token. You can't run bot without it.
            </summary>
        </member>
        <member name="P:Discord.Addons.BotConstructor.Bot.Client">
            <summary>
            Discord Client
            </summary>
        </member>
        <member name="P:Discord.Addons.BotConstructor.Bot.GetBotAsUser">
            <summary>
            Get bot as <see cref="T:Discord.WebSocket.SocketUser"/>.
            </summary>
        </member>
        <member name="P:Discord.Addons.BotConstructor.Bot.InteractiveService">
            <summary>
            Interactive service apply you to conduct dialogue (or something else) with user.
            </summary>
        </member>
        <member name="P:Discord.Addons.BotConstructor.Bot.TimeSpanForInteractivity">
            <summary>
            This propery set time span of timeout when someone conducts dialogue with bot. If user won't answer question (or something else) span bot stop dialogue.
            </summary>
        </member>
        <member name="P:Discord.Addons.BotConstructor.Bot.CommandService">
            <summary>
            Commands service.
            </summary>
        </member>
        <member name="P:Discord.Addons.BotConstructor.Bot.Services">
            <summary>
            Services. You can use to excute commands.
            </summary>
        </member>
        <member name="P:Discord.Addons.BotConstructor.Bot.Rooms">
            <summary>
            Initilizes new <see cref="P:Discord.Addons.BotConstructor.Bot.Rooms"/>
            </summary>
        </member>
        <member name="P:Discord.Addons.BotConstructor.Bot.PagedEmbed">
            <summary>
            Initilizes new <see cref="P:Discord.Addons.BotConstructor.Bot.PagedEmbed"/>
            </summary>
        </member>
        <member name="M:Discord.Addons.BotConstructor.Bot.#ctor(System.String)">
            <summary>
            Initilizes new <see cref="T:Discord.Addons.BotConstructor.Bot"/>
            </summary>
            <param name="token">There you should enter the bot token. You can get it on this website: https://discord.com/developers/applications/. You can enter it later, but you can't run bot without token. If token equals null <see cref="T:Discord.Addons.BotConstructor.Bot.NoTockenException"/> will throw.</param>
        </member>
        <member name="M:Discord.Addons.BotConstructor.Bot.RunBotAsync(System.Boolean)">
            <summary>
            Run bot. If <see cref="P:Discord.Addons.BotConstructor.Bot.Token"/> equals null <see cref="T:Discord.Addons.BotConstructor.Bot.NoTockenException"/> will throw.
            </summary>
            <param name="basicSetupOfCommands">By default it's true. If it's true <see cref="P:Discord.Addons.BotConstructor.Bot.CommandService"/> will setup.</param>
            <returns><see cref="P:System.Threading.Tasks.Task.CompletedTask"/></returns>
        </member>
        <member name="M:Discord.Addons.BotConstructor.Bot.SetStatusAsync(Discord.UserStatus)">
            <summary>
            Set bot status
            </summary>
            <returns><see cref="P:System.Threading.Tasks.Task.CompletedTask"/></returns>
        </member>
        <member name="M:Discord.Addons.BotConstructor.Bot.SetGameAsync(System.String,System.String)">
            <summary>
            Set bot game
            </summary>
            <param name="name">Name of game</param>
            <param name="streamUrl">Stream url</param>
            <returns><see cref="P:System.Threading.Tasks.Task.CompletedTask"/></returns>
        </member>
        <member name="T:Discord.Addons.BotConstructor.Bot.NoTockenException">
            <summary>
            This exception will throw if <see cref="P:Discord.Addons.BotConstructor.Bot.Token"/> equals null.
            </summary>
        </member>
        <member name="M:Discord.Addons.BotConstructor.Bot.NoTockenException.#ctor">
            <summary>
            Initalize new exception
            </summary>
        </member>
        <member name="T:Discord.Addons.BotConstructor.PagedEmbed">
            <summary>
            This class can help you to create paginated embed. For example: if you have a lot of commands and you want make "Help" for this, but in regular embed the number of characters is limited so you can use paged embed
            </summary>
        </member>
        <member name="M:Discord.Addons.BotConstructor.PagedEmbed.#ctor(Discord.Addons.BotConstructor.Bot)">
            <summary>
            Initilizes new <see cref="T:Discord.Addons.BotConstructor.PagedEmbed"/>
            </summary>
            <param name="bot"><see cref="T:Discord.Addons.BotConstructor.Bot"/></param>
        </member>
        <member name="M:Discord.Addons.BotConstructor.PagedEmbed.SendPaginatedEmbed(Discord.IMessage,Discord.Addons.Interactive.PaginatedMessage)">
            <summary>
            Send paginated reply.
            </summary>
            <param name="message">Message</param>
            <param name="paginatedMessage">Paginated reply that you want to send</param>
            <returns><see cref="T:Discord.IUserMessage"/></returns>
        </member>
        <member name="M:Discord.Addons.BotConstructor.PagedEmbed.SendPaginatedHelp(Discord.IMessage,Discord.Color,Discord.EmbedAuthorBuilder,System.String)">
            <summary>
            Send paginated help.
            </summary>
            <param name="message">Message</param>
            <param name="colorOfEmbed">Color of help</param>
            <param name="embedAuthorBuilder">If you want to write author you should initilize new <see cref="T:Discord.EmbedAuthorBuilder"/></param>
            <param name="title">Title of help</param>
            <returns></returns>
        </member>
        <member name="T:Discord.Addons.BotConstructor.Rooms">
            <summary>
            This module can help you create rooms system. For example: on Discord server a lot of voice channels and it terrifired. You can create and delete rooms dynamically!
            </summary>
        </member>
        <member name="P:Discord.Addons.BotConstructor.Rooms.GuildsCreateRoomsChannel">
            <summary>
            Hashtable of guilds. Where guild (<see cref="T:Discord.WebSocket.SocketGuild"/>) is key and CreateRoomChannel is value (<see cref="T:Discord.WebSocket.SocketVoiceChannel"/>).
            </summary>
        </member>
        <member name="M:Discord.Addons.BotConstructor.Rooms.#ctor(Discord.Addons.BotConstructor.Bot)">
            <summary>
            Initilizes new <see cref="T:Discord.Addons.BotConstructor.Rooms"/>
            </summary>
            <param name="bot"><see cref="T:Discord.Addons.BotConstructor.Bot"/></param>
        </member>
    </members>
</doc>
